{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","console","log","state","calculate","a","firstname","b","secondname","i","length","j","charAt","replace","count","c2","w","k","slice","result","className","onSubmit","this","htmlFor","type","color","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAyEeA,G,kBAtEb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAORC,aAAe,SAACC,GACd,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAMH,EAAEE,OAAOE,SAVb,EAalBC,aAAe,SAACL,GACdA,EAAEM,iBACFC,QAAQC,IAAI,EAAKC,OACjB,EAAKC,aAhBW,EAkBlBA,UAAY,WAGV,IAFA,IAAIC,EAAE,EAAKF,MAAMG,UACbC,EAAE,EAAKJ,MAAMK,WACRC,EAAI,EAAGA,EAAIJ,EAAEK,OAAQD,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAEG,OAAQC,IAC1B,GAAIN,EAAEO,OAAOH,KAAOF,EAAEK,OAAOD,GAAG,CAC5BN,EAAIA,EAAEQ,QAAQR,EAAEO,OAAOH,GAAI,IAC3BF,EAAIA,EAAEM,QAAQN,EAAEK,OAAOD,GAAI,IAC3BF,IACA,MAOhB,IAHA,IAAIK,EAAQT,EAAEK,OAASH,EAAEG,OACrBK,EAAKD,EAAM,EACXE,EAAI,SACCC,EAAE,EAAGA,EAAI,EAAIA,IACtBF,EAAKD,GAAS,EAAEG,GAEhBD,GADAA,EAAIA,EAAEE,MAAMH,GAAOC,EAAEE,MAAM,EAAEH,IACvBF,QAAQG,EAAEJ,OAAOI,EAAEN,OAAO,GAAG,IAKnCT,QAAQC,IAAI,EAAKC,MAAMgB,QACvB,EAAKxB,SAAS,CACZwB,OAAOH,KA1CT,EAAKb,MAAQ,CACXG,UAAW,GACXE,WAAW,GACXW,OAAO,IALO,E,sEAgDhB,OACI,yBAAKC,UAAU,iBACf,0BAAMA,UAAU,aAAaC,SAAUC,KAAKvB,cAC5C,6BAAS,6BACP,2BAAOwB,QAAQ,aAAf,aACA,6BACA,2BAAOC,KAAK,OAAOC,MAAM,QAAQL,UAAU,eAAevB,GAAG,YAAY6B,SAAUJ,KAAK7B,eACxF,6BACA,2BAAO8B,QAAQ,cAAf,qBACA,6BACA,2BAAOC,KAAK,OAAOJ,UAAU,eAAevB,GAAG,aAAc6B,SAAUJ,KAAK7B,eAC5E,6BAAS,6BACT,uCAEF,wCAAc6B,KAAKnB,MAAMgB,a,GA/DfQ,cCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.817db702.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css'\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname :\"\",\n      secondname:\"\",\n      result:\"\"\n    }\n  }\n  handleChange = (e) => {\n    this.setState({\n        [e.target.id] : e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    console.log(this.state)\n    this.calculate();\n  }\n  calculate = () => {\n    var a=this.state.firstname;\n    var b=this.state.secondname;\n    for (var i = 0; i < a.length; i++) { \n            for (var j = 0; j < b.length; j++){\n                if (a.charAt(i) === b.charAt(j)){\n                    a = a.replace(a.charAt(i), \"\");\n                    b = b.replace(b.charAt(j), \"\");\n                    i--;\n                    break;\n            }\n        }\n    }\n    var count = a.length + b.length ;\n    var c2 = count%6;\n    var w = \"FLAMES\";\n    for (var k=0; k < 5 ; k++ ){\n    c2 = count % (6-k);\n    w = w.slice(c2,) + w.slice(0,c2);\n    w = w.replace(w.charAt(w.length-1),\"\");\n    //alert(w);\n    //alert(\"two\");\n    }\n    //alert(w);\n    console.log(this.state.result)\n    this.setState({\n      result:w\n    })\n  }\n  render () {\n    return (\n        <div className=\"App container\" >\n        <form className=\"form-group\" onSubmit={this.handleSubmit}>\n        <br></br><br></br>\n          <label htmlFor=\"firstname\">Your Name</label>\n          <br></br>\n          <input type=\"text\" color=\"black\" className=\"form-control\" id=\"firstname\" onChange={this.handleChange} />\n          <br></br>\n          <label htmlFor=\"secondname\">Your Crush's Name</label>\n          <br></br>\n          <input type=\"text\" className=\"form-control\" id=\"secondname\"  onChange={this.handleChange} />\n          <br></br><br></br>\n          <button>Go</button>\n        </form>\n        <div>Result: {this.state.result}</div>\n        </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}